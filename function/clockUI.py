#!/usr/bin/env python

import PySimpleGUI as sg
import time



"""
 Timer Desktop Widget Creates a floating timer that is always on top of other windows You move it by grabbing anywhere on the window Good example of how to do a non-blocking, polling program using PySimpleGUI 
 Something like this can be used to poll hardware when running on a Pi

 While the timer ticks are being generated by PySimpleGUI's "timeout" mechanism, the actual value
  of the timer that is displayed comes from the system timer, time.time().  This guarantees an
  accurate time value is displayed regardless of the accuracy of the PySimpleGUI timer tick. If
  this design were not used, then the time value displayed would slowly drift by the amount of time
  it takes to execute the PySimpleGUI read and update calls (not good!)

    Copyright 2021 PySimpleGUI
"""


def time_as_int():
    return int(round(time.time() * 100))


# ----------------  Create Form  ----------------
def main(task_name):
    sg.theme('Black')

    layout = [[sg.Text('')],
              [sg.Text(f"开始执行: {task_name}")],
              [sg.Text('', size=(8, 2), font=('Helvetica', 20),
                    justification='center', key='text')],
              [sg.Button('Pause', key='-RUN-PAUSE-', button_color=('white', '#001480')),
               sg.Button('Finished', button_color=('white', '#007339'), key='-Finished-'),
               sg.Exit(button_color=('white', 'firebrick4'), key='Exit')]]

    window = sg.Window('Running Timer', layout,
                       auto_size_buttons=False,
                       keep_on_top=True,
                       grab_anywhere=True,
                       element_padding=(0, 0),
                       finalize=True,
                       element_justification='c',
                       right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_EXIT,return_keyboard_events=True)

    current_time, paused_time, paused = 0, 0, False
    start_time = time_as_int()
    QT_ENTER_KEY1 = 'special 16777220'
    QT_ENTER_KEY2 = 'special 16777221'

    while True:
        # --------- Read and update window --------
        if not paused:
            event, values = window.read(timeout=10)

            current_time = time_as_int() - start_time
        else:
            event, values = window.read()
        # --------- Do Button Operations --------
        print(event, values)
        if event in (sg.WIN_CLOSED, 'Exit'):
            paused_time=time_as_int()
            # ALWAYS give a way out of program
            break
        if event in ('-Finished-','\r', QT_ENTER_KEY1, QT_ENTER_KEY2):
            event='-Finished-'
            paused_time = time_as_int()
            break
        elif event in ('-RUN-PAUSE-',' '):
            paused = not paused
            if paused:
                paused_time = time_as_int()
            else:
                start_time = start_time + time_as_int() - paused_time
            # Change button's text
            window['-RUN-PAUSE-'].update('Run' if paused else 'Pause')
        elif event == 'Edit Me':
            sg.execute_editor(__file__)
        # --------- Display timer in window --------
        window['text'].update('{:02d}:{:02d}.{:02d}'.format((current_time // 100) // 60,
                                                            (current_time // 100) % 60,
                                                            current_time % 100))
    window.close()
    return start_time,paused_time,event,paused



if __name__=='__main__':
    main()